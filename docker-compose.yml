---

version: '3.1'

networks:
  back-tier:
    driver: bridge

services:
  postgresql-master:
    image: bitnami/postgresql:${POSTGRESQL_VERSION}
    container_name: postgresql-master
    restart: always
    ports:
      - "${POSTGRESQL_MASTER_PORT}:${POSTGRESQL_MASTER_PORT}"
    expose:
      - '${POSTGRESQL_MASTER_PORT}'
    volumes:
      - ./data/postgresql-master:/bitnami/postgresql:rw
      - ./data/postgresql-backup/staging:/home/postgres/staging
      - ./data/postgresql-backup/production:/home/postgres/production
      - ./logs/postgresql-master:/opt/bitnami/postgresql/logs:rw
      - ./scripts/postgresql:/docker-entrypoint-initdb.d:rw
    environment:
      - TZ=${TIMEZONE}                                                                                                   
      - POSTGRESQL_POSTGRES_PASSWORD=${POSTGRESQL_POSTGRES_PASSWORD}                                                     
      - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}                                                                       
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_MULTIPLE_DATABASES=${POSTGRESQL_MULTIPLE_DATABASE}                                                      
      - POSTGRESQL_DB_STAGING=${POSTGRESQL_DB_STAGING}
      - POSTGRESQL_DB_PRODUCTION=${POSTGRESQL_DB_PRODUCTION}
      - POSTGRESQL_REPLICATION_MODE=${POSTGRESQL_REPLICATION_MODE_MASTER}                                                
      - POSTGRESQL_REPLICATION_USER=${POSTGRESQL_REPLICATION_USER}                                                       
      - POSTGRESQL_REPLICATION_PASSWORD=${POSTGRESQL_REPLICATION_PASSWORD}                                                                                                             
      - ALLOW_EMPTY_PASSWORD=${ALLOW_EMPTY_PASSWORD}                                                                     
      - BITNAMI_DEBUG=true
    networks:
      - back-tier

  postgresql-slave:
    image: bitnami/postgresql:${POSTGRESQL_VERSION}
    container_name: postgresql-slave
    restart: always
    ports:
      - "${POSTGRESQL_SLAVE_PORT}:${POSTGRESQL_MASTER_PORT}"
    expose:
      - '${POSTGRESQL_SLAVE_PORT}'
    depends_on: 
      - postgresql-master
    volumes:
      - ./data/postgresql-slave:/bitnami/postgresql:rw
      - ./logs/postgresql-slave:/opt/bitnami/postgresql/logs:rw
    environment:
      - TZ=${TIMEZONE}
      - POSTGRESQL_REPLICATION_MODE=${POSTGRESQL_REPLICATION_MODE_SLAVE}
      - POSTGRESQL_REPLICATION_USER=${POSTGRESQL_REPLICATION_USER}
      - POSTGRESQL_REPLICATION_PASSWORD=${POSTGRESQL_REPLICATION_PASSWORD}
      - POSTGRESQL_MASTER_HOST=${POSTGRESQL_MASTER_HOST}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_MASTER_PORT_NUMBER=${POSTGRESQL_MASTER_PORT}
      - ALLOW_EMPTY_PASSWORD=${ALLOW_EMPTY_PASSWORD}
      - BITNAMI_DEBUG=true
    networks:
      - back-tier

  postgresql-backup:
    container_name: postgresql-backup
    build: 
      context: ./scripts/backups
    restart: unless-stopped 
    environment:
      - 'TZ=${TIMEZONE}'
      - 'POSTGRSQL_USER=${POSTGRESQL_USERNAME}'
      - 'POSTGRSQL_PASSWORD=${POSTGRESQL_PASSWORD}'
      - 'POSTGRSQL_HOST=${POSTGRESQL_MASTER_HOST}'
      - 'POSTGRSQL_PORT=${POSTGRESQL_MASTER_PORT}'
      - 'POSTGRSQL_STAGING_DATABASE=${POSTGRESQL_DB_STAGING}'
      - 'POSTGRSQL_PRODUCTION_DATABASE=${POSTGRESQL_DB_PRODUCTION}'
    networks:
      - app-tier
    depends_on: 
      - postgresql-master
    volumes:
      - ./data/postgresql-backup/staging:/backups/staging
      - ./data/postgresql-backup/production:/backups/production
